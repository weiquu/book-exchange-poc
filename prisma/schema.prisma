// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Book {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  author      String
  summary     String
  listedById  String   @db.Uuid
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [listedById], references: [id], onDelete: Cascade)

  exchangesRequested Exchange[] @relation("requestedBook")
  exchangesRequester Exchange[] @relation("requesterBook")
}

enum ExchangeStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Exchange {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requestedBookId String         @db.Uuid
  requesterBookId String         @db.Uuid
  status          ExchangeStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  requestedBook Book @relation(fields: [requestedBookId], references: [id], onDelete: Cascade, name: "requestedBook")
  requesterBook Book @relation(fields: [requesterBookId], references: [id], onDelete: Cascade, name: "requesterBook")

  @@unique([requestedBookId, requesterBookId], name: "exchangeIdentifier")
}
